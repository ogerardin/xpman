# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@2.4.0

jobs:
  build-linux:
    docker:
      - image: cimg/openjdk:17.0.2
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Generate cache seed
          command: find . -name 'pom.xml' | sort | xargs cat > effective-pom.xml
      - restore_cache:
          key: maven-{{ checksum "effective-pom.xml" }}-{{ arch }}
      - run:
          name: Build
          command: |
            mvn -v
            mvn -B -DskipTests clean package
      - save_cache:
          key: maven-{{ checksum "effective-pom.xml" }}-{{ arch }}
          paths:
            - ~/.m2
      - run:
          name: Prepare artifacts
          command: |
            mkdir -p workspace/artifacts            
            cp xpman-fx-dist/target/*.deb workspace/artifacts
            cp xpman-fx-dist/target/*.rpm workspace/artifacts
            for f in xpman-fx-dist/target/*-repackaged.jar; do cp $f workspace/artifacts/$(basename $f | sed "s/-fx-dist//" | sed "s/repackaged/linux/"); done
            ls -l workspace/artifacts
#      - store_artifacts:
#          path: workspace/artifacts
#          destination: linux
      - persist_to_workspace:
          root: workspace
          paths:
            - artifacts

  build-mac:
    macos:
      xcode: 14.3.1
    resource_class: macos.m1.medium.gen1
    environment:
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - run:
          name: Fix "Finder got an error - AppleEvent timed out. (-1712)"
          command: |
            epochdate=$(($(date +'%s * 1000 + %-N / 1000000')))
            tcc_service_appleevents="replace into access (service,client,client_type,auth_value,auth_reason,auth_version,indirect_object_identifier_type,indirect_object_identifier,flags,last_modified) values (\"kTCCServiceAppleEvents\",\"/usr/sbin/sshd\",1,2,4,1,0,\"com.apple.finder\",0,$epochdate);"
            sudo sqlite3 "/Users/distiller/Library/Application Support/com.apple.TCC/TCC.db" "$tcc_service_appleevents"
      - run:
          name: Install Java 17 and Maven
          command: |
            brew install openjdk@17
            sudo ln -sfn /usr/local/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
            brew install maven
      - checkout
      - run:
          name: Generate cache seed
          command: find . -name 'pom.xml' | sort | xargs cat > effective-pom.xml
      - restore_cache:
          key: maven-{{ checksum "effective-pom.xml" }}-{{ arch }}
      - run:
          name: Build
          command: |
            /usr/libexec/java_home -V
            export JAVA_HOME=`/usr/libexec/java_home -v 17`
            mvn -v
            mvn -B -DskipTests clean package
      - save_cache:
          key: maven-{{ checksum "effective-pom.xml" }}-{{ arch }}
          paths:
            - ~/.m2
      - run:
          name: Prepare artifacts
          command: |
            mkdir -p workspace/artifacts            
            cp xpman-fx-dist/target/*.pkg workspace/artifacts
            cp xpman-fx-dist/target/*.dmg workspace/artifacts
            for f in xpman-fx-dist/target/*-repackaged.jar; do cp $f workspace/artifacts/$(basename $f | sed "s/-fx-dist//" | sed "s/repackaged/mac/"); done
            ls -l workspace/artifacts
#      - store_artifacts:
#          path: workspace/artifacts
#          destination: mac
      - persist_to_workspace:
          root: workspace
          paths:
            - artifacts

  build-windows:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          name: Install scoop
          shell: powershell.exe
          command: |
            iwr -useb get.scoop.sh -outfile 'install.ps1'
            .\install.ps1 -RunAsAdmin
      - run:
          name: Install dependencies
          command: |
            scoop bucket add java
            scoop bucket add extras
            scoop bucket add versions
            # Workaround to avoid errors installing inno-setup, see https://github.com/ScoopInstaller/Extras/issues/13444
            scoop install versions/innounp-unicode
            scoop install openjdk17
            scoop install maven
            scoop install imagemagick
            scoop install inno-setup
            scoop install wixtoolset3
      - run:
          name: Generate cache seed
          shell: cmd.exe
          command: type pom.xml xpman-api\pom.xml xpman-fx\pom.xml xpman-fx-dist\pom.xml > effective-pom.xml
      - restore_cache:
          key: maven-{{ checksum "effective-pom.xml" }}-{{ arch }}
      - run:
          name: Build
          command: |
            mvn -v
            mvn -B -DskipTests clean package
      - save_cache:
          key: maven-{{ checksum "effective-pom.xml" }}-{{ arch }}
          paths:
            - C:\Users\circleci\.m2
      - run:
          name: Prepare artifacts
          shell: bash.exe
          command: |
            mkdir -p workspace/artifacts
            cp xpman-fx-dist/target/*.exe workspace/artifacts
            cp xpman-fx-dist/target/*.msi workspace/artifacts
            for f in xpman-fx-dist/target/*-repackaged.jar; do cp $f workspace/artifacts/$(basename $f | sed "s/-fx-dist//" | sed "s/repackaged/windows/"); done
            ls -l workspace/artifacts
#      - store_artifacts:
#          path: workspace\artifacts
#          destination: windows
      - persist_to_workspace:
          root: workspace
          paths:
            - artifacts

  publish-github-release:
    docker:
      - image: cibuilds/github:latest
    resource_class: small
    steps:
      - run:
          name: Install Maven
          command: |
            apk add maven
            mvn -v
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Publish Release on GitHub
          command: |
            ls -lR workspace
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            DATE=$(date +%Y-%m-%d)
            ghr -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "$VERSION ($DATE)" \
              -delete \
              "${VERSION}" \
              workspace/artifacts/

workflows:
  default:
    jobs:
      - build-linux
      - build-mac
      - build-windows
      - publish-github-release:
          requires:
            - build-linux
            - build-mac
            - build-windows
